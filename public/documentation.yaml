openapi: 3.0.0

info:
  title: Movie API
  description: An API being used to learn programming with NODE and back-end web development. I use movie data from the MosFilm youtube channel.
  version: 1.0.0.DEV


servers:
  - url: http://localhost:8080/
    description: Server for Development


paths:
  /movies:
    get:
      summary: Returns a list of movies.
      description: An array of movies will be sent as a JSON file.
      responses:
        "200":
          description: A JSON array of movie details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movies"
  /movies/{title}:
    get:
      summary: Gets a movie by title.
      parameters:
      - in: path
        name: title
        schema:
          type: string
          enum: [Stalker, Solaris, The Mirror, Andrei Rublev, Ivan's Childhood]
          example: Stalker
        required: true
        description: title of movie to get
      responses:
        "200":
          description: movie details requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movies" 
        "400":
          description: Error - no movie was found with requested title
          content:
            text/plain: no such movie
  /movies/genre/{genreName}:
    get:
      summary: Gets a genre by name.
      parameters:
      - in: path
        name: genreName
        schema:
          type: string
          enum: [Drama, War Movie, Science Fiction]
          example: Drama
        required: true
        description: title of genre to get
      responses:
        "200":
          description: genre details requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movies/items/properties/Genre" 
        "400":
          description: Error - no genre was found with requested name
          content:
            text/plain: no such genre
  /movies/director/{directorName}:
    get:
      summary: Gets a director by name.
      parameters:
      - in: path
        name: directorName
        schema:
          type: string
          enum: [Andrey Tarkovsky]
          example: Andrey Tarkovsky
        required: true
        description: name of director to get
      responses:
        "200":
          description: director details requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movies/items/properties/Director" 
        "400":
          description: Error - no director was found with requested name
          content:
            text/plain: no such director
  /user:
    post:
      summary: add a new user
      requestBody: 
        description: details of user to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users"
      responses:
        "200":
          description: details of new user
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/users"
        "400": 
          description: Error - request is missing name
            content:
              text/plain: Needs a name!
  /user/{id}:
    put:
      summary: Updates the user's name with inputed id
      parameters:
      - in: path
        name: id
        schema:
          type: string
          enum: [This is an example!]
          example: This is an example!
        required: true
      requestBody: 
        description: details of user to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users"
      responses:
        "200":
          description: details of updated user
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/users"
        "400": 
          description: Error - no user found with inputed id
            content:
              text/plain: no user with that id
  /user/{id}/{movieTitle}:
    post:
      summary: adds a favorite movie to user's favorite movie
      parameters:
      - in: path
        name: id
        schema:
          type: string
          enum: [This is an example!]
          example: This is an example!
        required: true
      - in: path
        name: movieTitle
        schema:
          type: string
          enum: [Stalker, Solaris, The Mirror, Andrei Rublev, Ivan's Childhood]
          example: Stalker
        required: true
      responses:
        "201":
          description: notification that movie has been added
          content:
            text/plain: movieTitle has been added to user id's favorite movies
        "400": 
          description: Error - no user found with inputed id
            content:
              text/plain: no user with that id
  /user/{id}/{movieTitle}:
    delete:
      summary: removes a favorite movie from user's favorite movie
      parameters:
      - in: path
        name: id
        schema:
          type: string
          enum: [This is an example!]
          example: This is an example!
        required: true
      - in: path
        name: movieTitle
        schema:
          type: string
          enum: [Stalker, Solaris, The Mirror, Andrei Rublev, Ivan's Childhood]
          example: Stalker
        required: true
      responses:
        "200":
          description: notification that movie has been removed
          content:
            text/plain: movieTitle has been removed from user id's favorite movies
        "400": 
          description: Error - no user found with inputed id
            content:
              text/plain: no user with that id
  /user/{id}:
    delete:
      summary: removes a user by id
      parameters:
      - in: path
        name: id
        schema:
          type: string
          enum: [This is an example!]
          example: This is an example!
        required: true
      responses:
        "200":
          description: notification that user has been removed
          content:
            text/plain: user id has been deleted
        "400": 
          description: Error - no user found with inputed id
            content:
              text/plain: no user with that id
  components:
    schemas:
      movies:
        type: array
        items:
          type: object
          properties:
            Title: 
              type: string
            Year: 
             type: int
            Director: 
              type: array
                items:
                  properties:
                    Name: 
                      type: string
                example:
                  - Name: Andrey Tarkovsky
            Description: 
              type: string
            URL: 
              type: string
            Subs: 
            type: array
              items:
                properties:
                  Spanish: 
                    type: boolean
                  SpanishURL: 
                    type: string
              example:
                - Spanish: true
                - SpanishURL: "#"
            Genre: array
              items:
                properties:
                  Name: 
                    type: string
                  Description:
                    type: string
              example:
                - Name: Drama
                - Description: The genre is...
      users:
        type: array
        items:
          type: object
          properties:
            ID: 
              type: string
            Name:
              type: string
            FavoriteMovies:
              type: array
        example: 
          - ID: This is an example!
          - Name: Me Myself
          - FavoriteMovies: [Stalker, Ivan's Childhood]