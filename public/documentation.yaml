openapi: 3.0.0

info:
  title: Movie API
  description: An API being used to learn programming with NODE and back-end web development. I use movie data from the MosFilm youtube channel.
  version: 1.0.0.DEV


servers:
  - url: http://localhost:8080/
    description: Server for Development


paths:
  /:
    get:
      summary: Returns this documentation file.
      description: Returns this file that you are looking at right here.
      reponses:
        "200":
          description: This document.
          content:
            application/json:
  /login:
    post:
      summary: Authentication to login as a registered User
        parameters:
        - in: query
          name: Username
          schema:
            type: string
          description: Username=Username the username for the user to login as
        - in: query
          name: Password
          schema:
            type: string
          description: Password=Password the password for the user to login
        responses:
          "200":
           description: ok
            content:
              applications/json:
                schema:
                  $ref: "#/components/schemas/users"
                  token:
                    type: string
          "400": 
            description: Incorrect Username or Password
              content:
                applications/json:
                  schema:
                    message: 
                      type: string
                    user:
                      type: boolean
          "500":
            description: Catch all error message
            content:
              text/plain: Error + description of error
  /movies:
    get:
      summary: Returns a list of movies.
      description: An array of movies will be sent as a JSON file.
      responses:
        "200":
          description: A JSON array of movie details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movies"
        "500":
          description: Catch all error message
          content:
            text/plain: Error + description of error
  /movies/{title}:
    get:
      summary: Gets a movie by title.
      parameters:
      - in: path
        name: title
        schema:
          type: string
          enum: [Stalker, Solaris, The Mirror, Andrei Rublev, Ivan's Childhood]
          example: Stalker
        required: true
        description: title of movie to get
      responses:
        "200":
          description: movie details requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movies" 
        "400":
          description: Error - no movie was found with requested title
          content:
            text/plain: title not found
        "500":
          description: Catch all error message
          content:
            text/plain: Error + description of error
  /movies/genre/{genreName}:
    get:
      summary: Gets a genre by name.
      parameters:
      - in: path
        name: genreName
        schema:
          type: string
          enum: [Drama, War Movie, Science Fiction]
          example: Drama
        required: true
        description: title of genre to get
      responses:
        "200":
          description: genre details requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movies/items/properties/Genre" 
        "400":
          description: Error - no genre was found with requested name
          content:
            text/plain: genreName not found
        "500":
          description: Catch all error message
          content:
            text/plain: Error + description of error
  /movies/director/{directorName}:
    get:
      summary: Gets a director by name.
      parameters:
      - in: path
        name: directorName
        schema:
          type: string
          enum: [Andrey Tarkovsky]
          example: Andrey Tarkovsky
        required: true
        description: name of director to get
      responses:
        "200":
          description: director details requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movies/items/properties/Director" 
        "400":
          description: Error - no director was found with requested name
          content:
            text/plain: directorName not found
        "500":
          description: Catch all error message
          content:
            text/plain: Error + description of error
  /users:
    get:
      summary: Returns a list of all users.
        description: An array of all users will be sent as a JSON file.
        responses:
          "200":
            description: A JSON array of all users.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/user"
          "500":
            description: Catch all error message
            content:
              text/plain: Error + description of error
    post:
      summary: add a new user
      requestBody: 
        description: details of user to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users"
      responses:
        "200":
          description: details of new user
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/users"
        "400": 
          description: The Username requested is already taken. It must be unique.
            content:
              text/plain: Username already exists
        "422":
          description: validation error - Username, email, or password filled incorrectly
            content:
              applications/json:
                schema:
                  errors:
                    type: array
        "500":
          description: Catch all error message
          content:
            text/plain: Error + description of error
  /users/{Username}:
    get:
      summary: Gets a user by username.
        parameters:
        - in: path
          name: Username
          schema:
            type: string
            enum: [callmethis]
            example: Template
         required: true
         description: username for user to get details about
        responses:
          "200":
            description: User details requested
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/users" 
          "400":
            description: Error - no user was found with requested Username
            content:
              text/plain: Username not found
          "500":
          description: Catch all error message
          content:
            text/plain: Error + description of error
    put:
      summary: Updates the user's details with inputed username
      parameters:
      - in: path
        name: Username
        schema:
          type: string
          enum: [callmethis]
          example: Template
        required: true
      requestBody: 
        description: details of user to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users"
      responses:
        "200":
          description: details of updated user
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/users"
        "400": 
          description: Error - no user found with inputed username
            content:
              text/plain: username - there is no such user
        "422":
          description: validation error - Username, password, or email filled incorrectly
            content:
              applications/json:
                schema:
                  errors:
                    type: array
        "500":
          description: Catch all error message
          content:
            text/plain: Error + description of error
    delete:
      summary: deletes the user's name with inputed username
      parameters:
      - in: path
        name: Username
        schema:
          type: string
          enum: [callmethis]
          example: Template
        required: true
      responses:
        "200":
          description: details of updated user
          content:
            text/plain: Username was deleted
        "400": 
          description: Error - no user found with inputed username
            content:
              text/plain: username was not found
        "500":
          description: Catch all error message
          content:
            text/plain: Error + description of error
  /users/{Username}/movies/{movieID}:
    post:
      summary: adds a favorite movie to user's favorite movie
      parameters:
      - in: path
        name: Username
        schema:
          type: string
          enum: [callmethis]
          example: Template
        required: true
      - in: path
        name: movieID
        schema:
          type: string
          enum: [672d36d13fdc6e5e560d8197, 672d36d13fdc6e5e560d8199]
          example: 672d36d13fdc6e5e560d8197
        required: true
      responses:
        "201":
          description: notification that movie has been added
          content:
            text/plain: movieID has been added to Username's favorites
        "400": 
          description: Error - no user found with inputed username
            content:
              text/plain: username not found
        "500":
          description: Catch all error message
          content:
            text/plain: Error + description of error
  /users/{Username}/movies/{movieID}:
    delete:
      summary: removes a favorite movie from user's favorite movie
      parameters:
      - in: path
        name: Username
        schema:
          type: string
          enum: [callmethis]
          example: Template
        required: true
      - in: path
        name: movieID
        schema:
          type: string
          enum: [672d36d13fdc6e5e560d8197, 672d36d13fdc6e5e560d8199]
          example: 672d36d13fdc6e5e560d8197
        required: true
      responses:
        "200":
          description: notification that movie has been removed
          content:
            text/plain: movieID has been removed from Username's favorites
        "400": 
          description: Error - no user found with inputed username
            content:
              text/plain: username not found
  /user/{Username}:
    delete:
      summary: removes a user by username
      parameters:
      - in: path
        name: Username
        schema:
          type: string
          enum: [callmethis]
          example: Template
        required: true
      responses:
        "200":
          description: notification that user has been removed
          content:
            text/plain: user has been deleted
        "400": 
          description: Error - no user found with inputed username
            content:
              text/plain: no user with that username
  components:
    schemas:
      movies:
        type: array
        items:
          type: object
          properties:
            Title: 
              type: string
            Year: 
             type: int
            Director: 
              type: array
                items:
                  properties:
                    Name: 
                      type: string
                example:
                  - Name: Andrey Tarkovsky
            Description: 
              type: string
            URL: 
              type: string
            Subs: 
            type: array
              items:
                properties:
                  Spanish: 
                    type: boolean
                  SpanishURL: 
                    type: string
              example:
                - Spanish: true
                - SpanishURL: "#"
            Genre: array
              items:
                properties:
                  Name: 
                    type: string
                  Description:
                    type: string
              example:
                - Name: Drama
                - Description: The genre is...
      users:
        type: array
        items:
          type: object
          properties:
            Username: 
              type: string
            Password:
              type: string
            Email:
              type: string
            Birthdate:
              type: date
            Favorites:
              type: array
        example: 
          - Username: Template
          - Password: Password123
          - Email: 1234@mail.com
          - Birthdate: 1984-02-19T00:00:00.000Z
          - FavoriteMovies: ['672d36d13fdc6e5e560d8197', '672d36d13fdc6e5e560d8199']